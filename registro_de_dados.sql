-- REGISTRAR LOJA
CREATE OR REPLACE FUNCTION REGISTRAR_LOJA(
	USUARIO VARCHAR, 
	SENHA VARCHAR, 
	NOME VARCHAR, 
	DESCRICAO VARCHAR
) RETURNS VOID AS $$ 
BEGIN
	IF (USUARIO IS NULL) THEN
		RAISE EXCEPTION 'O VALOR USUARIO NÃO PODE SER NULO, INFORME O USUARIO (ARGUMENTO NA POSICAO 0)';
	ELSIF (SENHA IS NULL) THEN
		RAISE EXCEPTION 'O VALOR SENHA NÃO PODE SER NULO, INFORME UMA SENHA (ARGUMENTO NA POSICAO 1)';
	ELSIF (NOME IS NULL) THEN
		RAISE EXCEPTION 'O VALOR NOME NÃO PODE SER NULO, INFORME O NOME (ARGUMENTO NA POSICAO 2)';
	ELSIF (DESCRICAO IS NULL) THEN
		RAISE EXCEPTION 'O VALOR DESCRICAO NÃO PODE SER NULO, INFORME UMA DESCRICAO (ARGUMENTO NA POSICAO 3)';
	ELSIF (LENGTH(USUARIO) < 3) THEN
		RAISE EXCEPTION 'O VALOR USUÁRIO DEVE TER PELO MENOS 3 CARACTERES';
	ELSIF (LENGTH(SENHA) < 6) THEN
		RAISE EXCEPTION 'A SENHA DEVE TER PELO MENOS 6 CARACTERES';
	ELSIF (LENGTH(NOME) < 3) THEN
		RAISE EXCEPTION 'O NOME DEVE TER PELO MENOS 3 CARACTERES';
	END IF;
	
	INSERT INTO LOJA 
		(USUARIO, SENHA, NOME, DESCRICAO)
	VALUES 
		(USUARIO, SENHA, NOME, DESCRICAO);
		
	RAISE INFO 'LOJA REGISTRADA COM SUCESSO!';
END;
$$ LANGUAGE PLPGSQL;

SELECT REGISTRAR_LOJA('Loja01', '123456', 'Loja 01', 'Roupas Teresina');

--===================================================================================

-- REGISTAR OS DADOS DO ENDERECO NO BANCO DE DADOS E RETORNAR O ID DO REGISTRO
CREATE OR REPLACE FUNCTION REGISTRAR_ENDERECO_NO_BANCO_DE_DADOS(
	CEP VARCHAR,
	RUA VARCHAR,
	NUMERO INT,
	COMPLEMENTO VARCHAR,
	CIDADE VARCHAR,
	UF VARCHAR
)
RETURNS INT AS $$ 
DECLARE
ENDEREC_ID INT;
BEGIN
	INSERT INTO ENDERECO(CEP, RUA, NUMERO, COMPLEMENTO, CIDADE, UF)
	VALUES (CEP, RUA, NUMERO, COMPLEMENTO, CIDADE, UF)
	RETURNING ID_ENDERECO INTO ENDEREC_ID;
	RAISE INFO 'ENDERECO REGISTRADO COM SUCESSO!';
	RETURN ENDEREC_ID;
END 
$$ LANGUAGE PLPGSQL;

--===================================================================================

-- REGISTAR OS DADOS DO CLIENTE NO BANCO DE DADOS
CREATE OR REPLACE FUNCTION REGISTRAR_CLIENTE_NO_BANCO_DE_DADOS(
	NOME VARCHAR,
	USUARIO VARCHAR,
	SENHA VARCHAR,
	CPF VARCHAR,
	ID_ENDERECO INT
)
RETURNS VOID AS $$ 
BEGIN
	INSERT INTO CLIENTE(NOME, USUARIO, SENHA, CPF, ID_ENDERECO)
	VALUES (NOME, USUARIO, SENHA, CPF, ID_ENDERECO);
	RAISE INFO 'CLIENTE REGISTRADO COM SUCESSO!';
END 
$$ LANGUAGE PLPGSQL;

--===================================================================================

-- REGISTRAR CLIENTE E ENDERECO
CREATE OR REPLACE FUNCTION REGISTRAR_CLIENTE_COM_ENDERECO(
	-- Cliente
	NOME VARCHAR,
	USUARIO VARCHAR,
	SENHA VARCHAR,
	CPF VARCHAR,
	-- Endereco
	CEP VARCHAR,
	RUA VARCHAR,
	NUMERO INT,
	COMPLEMENTO VARCHAR,
	CIDADE VARCHAR,
	UF VARCHAR
) RETURNS VOID AS $$
DECLARE
	ID_ENDEREC INT;
BEGIN 
	IF (NOME IS NULL) THEN
		RAISE EXCEPTION 'INFORME O NOME DO CLIENTE';
	ELSIF (USUARIO IS NULL) THEN 
		RAISE EXCEPTION 'INFORME O USUARIO DO CLIENTE';
	ELSIF (SENHA IS NULL) THEN 
		RAISE EXCEPTION 'INFORME A SENHA DO CLIENTE';
	ELSIF (CPF IS NULL) THEN 
		RAISE EXCEPTION 'INFORME O CPF DO CLIENTE';
	ELSIF (CEP IS NULL) THEN 
		RAISE EXCEPTION 'INFORME O CEP DO ENDERECO';
	ELSIF (RUA IS NULL) THEN
		RAISE EXCEPTION 'INFORME A RUA DO ENDERECO';
	ELSIF (NUMERO IS NULL) THEN
		RAISE EXCEPTION 'INFORME O NUMERO DO ENDERECO';
	ELSIF (COMPLEMENTO IS NULL) THEN
		RAISE EXCEPTION 'INFORME O COMPLEMENTO DO ENDERECO';
	ELSIF (CIDADE IS NULL) THEN
		RAISE EXCEPTION 'INFORME A CIDADE DO ENDERECO';
	ELSIF (UF IS NULL) THEN
		RAISE EXCEPTION 'INFORME A UNIDADE FEDERATIVA (UF) DO ENDERECO';
	-- REGRAS DE NEGOCIO 
	ELSIF (LENGTH(CPF) != 11) THEN
		RAISE EXCEPTION 'O CEP DEVE CONTER 11 CARACTERES';
	ELSIF (LENGTH(CEP) != 8) THEN
		RAISE EXCEPTION 'O CEP DEVE CONTER 8 CARACTERES';
	ELSIF (NUMERO < 0) THEN
		RAISE EXCEPTION 'O NUMERO NAO PODE SER NEGATIVO';
	ELSIF (LENGTH(UF) != 2) THEN
		RAISE EXCEPTION 'A UNIDADE FEDERATIVA DEVE CONTER 2 CARACTERES';
	ELSE
		ID_ENDEREC := (REGISTRAR_ENDERECO_NO_BANCO_DE_DADOS(CEP, RUA, NUMERO, COMPLEMENTO, CIDADE, UF));
		PERFORM REGISTRAR_CLIENTE_NO_BANCO_DE_DADOS(NOME, USUARIO, SENHA, CPF, ID_ENDEREC);
		RAISE INFO 'CLIENTE REGISTRADO NO BANCO DE DADOS COM ENDEREÇO';
	END IF;
END;
$$  LANGUAGE PLPGSQL;

SELECT REGISTRAR_CLIENTE_COM_ENDERECO('Pedro Henrique', 'pedroh', '123456', '12345678900', '65000000', 'Quintino Bocaiuva', 1065, 'Próximo à praca do Fripisa', 'Teresina', 'PI');

--===================================================================================

-- INFORMAR O USUARIO DO CLIENTE E RECEBE O ID DE VOLTA
CREATE OR REPLACE FUNCTION SELECIONAR_ID_CLIENTE_POR_USUARIO(USUARIO_VAR VARCHAR)
RETURNS INT AS $$
DECLARE
	ID_CLIENTE_RETORNO INTEGER;
BEGIN
	ID_CLIENTE_RETORNO = (SELECT ID_CLIENTE FROM CLIENTE WHERE USUARIO = USUARIO_VAR);
	RETURN ID_CLIENTE_RETORNO;
END $$ LANGUAGE PLPGSQL;

--===================================================================================

-- ADICIOANR CARTÃO
CREATE OR REPLACE FUNCTION ADICIONAR_CARTAO_AO_PERFIL(
	TITULAR VARCHAR,
	DIGITOS VARCHAR,
	VALIDADE VARCHAR,
	CSV VARCHAR,
	SAVE BOOLEAN,
	USUARIO VARCHAR
) RETURNS VOID AS $$
DECLARE 
	IS_SAVE BOOLEAN;
	ID_CLIENTE INTEGER;
BEGIN 
	IF (TITULAR IS NULL) THEN
		RAISE EXCEPTION 'INFORME O TITULAR DO CARTAO';
	ELSIF (DIGITOS IS NULL) THEN
		RAISE EXCEPTION 'INFORME OS DIGITOS DO CARTAO';
	ELSIF (VALIDADE IS NULL) THEN
		RAISE EXCEPTION 'INFORME A VALIDADE DO CARTAO';
	ELSIF (CSV IS NULL) THEN
		RAISE EXCEPTION 'INFORME O CSV DO CARTAO';
	ELSIF (USUARIO IS NULL) THEN
		RAISE EXCEPTION 'INFORME O USUÁRIO DONO DO CARTAO';
	-- REGRAS DE NEGOCIO
	ELSIF (LENGTH(DIGITOS) != 4) THEN
		RAISE EXCEPTION 'DIGITO DEVE CONTER 4 CARACTERES';
	ELSIF (LENGTH(VALIDADE) != 5) THEN
		RAISE EXCEPTION 'VALIDADE DEVE CONTER 5 CARACTERES';
	ELSIF (SAVE IS NULL) THEN
		IS_SAVE = FALSE;
	ELSE
		ID_CLIENTE := SELECIONAR_ID_CLIENTE_POR_USUARIO(USUARIO);
		
		IF (ID_CLIENTE IS NULL) THEN
			RAISE EXCEPTION 'USUARIO NAO CADASTRADO, VERIFIQUE O USUARIO INFORMADO E TENTE NOVAMENTE';
		ELSE
			INSERT INTO CARD(TITULAR, DIGITOS, VALIDADE, CSV, SAVE, ID_CLIENTE)
			VALUES (TITULAR, DIGITOS, VALIDADE, CSV, IS_SAVE, ID_CLIENTE);
			RAISE INFO 'CARTAO ADICIONADO COM SUCESSO AO CLIENTE';
		END IF;
	END IF;
END $$ LANGUAGE PLPGSQL;

SELECT ADICIONAR_CARTAO_AO_PERFIL('PEDRO HENRIQUE', '1234', '07-26', '123456789101112', TRUE, 'pedroh');

-- ADICIONAR PRODUTO
