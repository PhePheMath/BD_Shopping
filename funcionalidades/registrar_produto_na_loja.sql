/* REQUISITOS */

-- 1 - Uma função deve ser criada para adicionar um produto em uma loja (entidade produto_loja)
-- 2 - A função adicionar produto na loja deve verificar se todos os dados são válidos
-- 3 - O preço do produto na loja não pode ser negativo
-- 4 - A quantidade do produto na loja não pode ser negativa

/* FUNÇÕES NECESSAŔIAS PARA A RESOLUÇÃO */

-- ADICIONAR_PRODUTO_NA_LOJA(PRODUTO_ID INT, LOJA_ID INT, PRECO FLOAT, QUANTIDADE INT)  -> VOID
-- VERIFICA_EXISTENCIA_DE_PRODUTO(PRODUTO_ID INT)                                       -> BOOLEAN
-- VERIFICA_EXISTENCIA_DE_LOJA(LOJA_ID INT)                                             -> BOOLEAN

--===========================================================================================--
CREATE OR REPLACE FUNCTION ADICIONAR_PRODUTO_NA_LOJA(PRODUTO_ID INT, LOJA_ID INT, PRECO FLOAT, QUANTIDADE INT)
RETURNS VOID AS $$
DECLARE
    PRODUTO_EXISTE BOOLEAN;
    LOJA_EXISTE BOOLEAN;
BEGIN

    PRODUTO_EXISTE := VERIFICA_EXISTENCIA_DE_PRODUTO(PRODUTO_ID);
    LOJA_EXISTE := VERIFICA_EXISTENCIA_DE_LOJA(LOJA_ID);

    IF (PRODUTO_EXISTE = FALSE) THEN
        RAISE EXCEPTION 'PRODUTO NÃO ENCONTRADO';
    ELSIF (LOJA_EXISTE = FALSE) THEN
        RAISE EXCEPTION 'LOJA NÃO ENCONTRADA';
    ELSIF (PRECO IS NULL) THEN
        RAISE EXCEPTION 'INFORME O PREÇO DO PRODUTO';
    ELSIF (QUANTIDADE IS NULL) THEN
        RAISE EXCEPTION 'INFORME O QUANTIDADE DO PRODUTO EM ESTOQUE';
    ELSIF (PRECO < 0) THEN
        RAISE EXCEPTION 'O PREÇO DO PRODUTO NÃO PODE SER NEGATIVO';
    ELSIF (QUANTIDADE < 0) THEN
        RAISE EXCEPTION 'A QUANTIDADE EM ESTOQUE NÃO PODE SER NEGATIVO';
    ELSE
        INSERT INTO PRODUTO_LOJA(ID_PRODUTO, ID_LOJA, PRECO_PRODUTO, QUANTIDADE)
        VALUES (PRODUTO_ID, LOJA_ID, PRECO, QUANTIDADE);

        RAISE INFO 'PRODUTO ADICIONADO A LOJA INFORMADA';
    END IF;
    
END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--
CREATE OR REPLACE FUNCTION VERIFICA_EXISTENCIA_DE_PRODUTO(PRODUTO_ID INT)
RETURNS BOOLEAN AS $$
DECLARE
    QTD_RESULTADOS INT;
BEGIN
    IF (PRODUTO_ID IS NULL) THEN
        RAISE EXCEPTION 'INFORME O ID DO PRODUTO';
    END IF;
    
    SELECT COUNT(ID_PRODUTO) FROM PRODUTO 
    WHERE ID_PRODUTO = PRODUTO_ID 
    INTO QTD_RESULTADOS;

    RETURN QTD_RESULTADOS > 0;
END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--
CREATE OR REPLACE FUNCTION VERIFICA_EXISTENCIA_DE_LOJA(LOJA_ID INT)
RETURNS BOOLEAN AS $$
DECLARE
    QTD_RESULTADOS INT;
BEGIN
    IF (LOJA_ID IS NULL) THEN
        RAISE EXCEPTION 'INFORME O ID DA LOJA';
    END IF;
    
    SELECT COUNT(ID_LOJA) FROM LOJA 
    WHERE ID_LOJA = LOJA_ID
    INTO QTD_RESULTADOS;

    RETURN QTD_RESULTADOS > 0;
END;
$$ LANGUAGE PLPGSQL;
