CREATE TABLE IF NOT EXISTS LOJA (
	ID_LOJA SERIAL PRIMARY KEY,
	USUARIO VARCHAR(50) NOT NULL,
	SENHA VARCHAR(50) NOT NULL,
	NOME VARCHAR(128) NOT NULL,
	DESCRICAO VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUTO (
	ID_PRODUTO SERIAL PRIMARY KEY,
	NOME VARCHAR(128) NOT NULL,
	DESCRICAO VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS ENDERECO(
	ID_ENDERECO SERIAL PRIMARY KEY,
	CEP VARCHAR(8) NOT NULL,
	RUA VARCHAR(128) NOT NULL,
	NUMERO INT NOT NULL,
	COMPLEMENTO VARCHAR(128),
	CIDADE VARCHAR(50) NOT NULL,
	UF VARCHAR(2) NOT NULL
);

CREATE TABLE IF NOT EXISTS CLIENTE (
	ID_CLIENTE SERIAL PRIMARY KEY,
	NOME VARCHAR(128),
	USUARIO VARCHAR(50) NOT NULL UNIQUE,
	SENHA VARCHAR(50) NOT NULL,
	CPF VARCHAR(11) UNIQUE NOT NULL,
	ID_ENDERECO INT NOT NULL,
	FOREIGN KEY (ID_ENDERECO) REFERENCES ENDERECO(ID_ENDERECO)
);

CREATE TABLE IF NOT EXISTS CARD (
	ID_CARD SERIAL PRIMARY KEY,
	TITULAR VARCHAR(128) NOT NULL,
	DIGITOS VARCHAR(4) NOT NULL,
	VALIDADE VARCHAR(5) NOT NULL,
	CSV VARCHAR(50) NOT NULL,
	SAVE BOOLEAN,
	ID_CLIENTE INT NOT NULL,
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE)
);

CREATE TABLE IF NOT EXISTS PRODUTO_LOJA (
	ID_PRODUTO_LOJA SERIAL PRIMARY KEY,
	ID_PRODUTO INT NOT NULL,
	ID_LOJA INT NOT NULL,
	PRECO_PRODUTO FLOAT NOT NULL,
	QUANTIDADE INT NOT NULL,
	FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO(ID_PRODUTO),
	FOREIGN KEY (ID_LOJA) REFERENCES LOJA(ID_LOJA)
);

CREATE TABLE IF NOT EXISTS CARRINHO (
	ID_CARRINHO SERIAL PRIMARY KEY,
	ID_CLIENTE INT NOT NULL,
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE)
);

CREATE TABLE IF NOT EXISTS ITEM_CARRINHO (
	ID_ITEM_CARRINHO SERIAL PRIMARY KEY,
	ID_PRODUTO_LOJA INT NOT NULL,
	ID_CARRINHO INT NOT NULL,
	QUANTIDADE INT NOT NULL,
	FOREIGN KEY (ID_PRODUTO_LOJA) REFERENCES PRODUTO_LOJA(ID_PRODUTO_LOJA),
	FOREIGN KEY (ID_CARRINHO) REFERENCES CARRINHO(ID_CARRINHO)
);

CREATE TABLE IF NOT EXISTS PEDIDO (
	ID_PEDIDO SERIAL PRIMARY KEY,
	VALOR FLOAT NOT NULL,
	STATUS_VENDA INT NOT NULL,
	FORMA_DE_PAGAMENTO INT NOT NULL,
	PROTOCOLO_PAGAMENTO VARCHAR(128) NOT NULL,
	DATA_COMPRA DATE NOT NULL,
	DATA_PAGAMENTO DATE,
	DATA_ENVIO DATE,
	DATA_ENTREGA DATE,
	ID_ENDERECO INT NOT NULL,
	ID_CLIENTE INT NOT NULL,
	FOREIGN KEY (ID_ENDERECO) REFERENCES ENDERECO(ID_ENDERECO),
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE)
);

CREATE TABLE IF NOT EXISTS ITEM_PEDIDO (
	ID_ITEM_PEDIDO SERIAL PRIMARY KEY,
	ID_PRODUTO_LOJA INT NOT NULL,
	ID_PEDIDO INT NOT NULL,
	VALOR_PRODUTO FLOAT NOT NULL,
	QUANTIDADE INT NOT NULL,
	FOREIGN KEY (ID_PRODUTO_LOJA) REFERENCES PRODUTO_LOJA(ID_PRODUTO_LOJA),
	FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO(ID_PEDIDO)
);





--====================================CLIENTE================================================--
-- REGISTRAR LOJA
CREATE OR REPLACE FUNCTION REGISTRAR_LOJA(
	USUARIO VARCHAR, 
	SENHA VARCHAR, 
	NOME VARCHAR, 
	DESCRICAO VARCHAR
    ) RETURNS VOID AS $$ 
    BEGIN
        IF (USUARIO IS NULL) THEN
            RAISE EXCEPTION 'O VALOR USUARIO NÃO PODE SER NULO, INFORME O USUARIO (ARGUMENTO NA POSICAO 0)';
        ELSIF (SENHA IS NULL) THEN
            RAISE EXCEPTION 'O VALOR SENHA NÃO PODE SER NULO, INFORME UMA SENHA (ARGUMENTO NA POSICAO 1)';
        ELSIF (NOME IS NULL) THEN
            RAISE EXCEPTION 'O VALOR NOME NÃO PODE SER NULO, INFORME O NOME (ARGUMENTO NA POSICAO 2)';
        ELSIF (DESCRICAO IS NULL) THEN
            RAISE EXCEPTION 'O VALOR DESCRICAO NÃO PODE SER NULO, INFORME UMA DESCRICAO (ARGUMENTO NA POSICAO 3)';
        ELSIF (LENGTH(USUARIO) < 3) THEN
            RAISE EXCEPTION 'O VALOR USUÁRIO DEVE TER PELO MENOS 3 CARACTERES';
        ELSIF (LENGTH(SENHA) < 6) THEN
            RAISE EXCEPTION 'A SENHA DEVE TER PELO MENOS 6 CARACTERES';
        ELSIF (LENGTH(NOME) < 3) THEN
            RAISE EXCEPTION 'O NOME DEVE TER PELO MENOS 3 CARACTERES';
        END IF;
        
        INSERT INTO LOJA 
            (USUARIO, SENHA, NOME, DESCRICAO)
        VALUES 
            (USUARIO, SENHA, NOME, DESCRICAO);
            
        RAISE INFO 'LOJA REGISTRADA COM SUCESSO!';
    END;
$$ LANGUAGE PLPGSQL;


-- VERIFICAR LOJA
CREATE OR REPLACE FUNCTION VERIFICA_EXISTENCIA_DE_LOJA(LOJA_ID INT)
    RETURNS BOOLEAN AS $$
    DECLARE
        QTD_RESULTADOS INT;
    BEGIN
        IF (LOJA_ID IS NULL) THEN
            RAISE EXCEPTION 'INFORME O ID DA LOJA';
        END IF;
        
        SELECT COUNT(ID_LOJA) FROM LOJA 
        WHERE ID_LOJA = LOJA_ID
        INTO QTD_RESULTADOS;

        RETURN QTD_RESULTADOS > 0;
    END;
$$ LANGUAGE PLPGSQL;

--======================================CLIENTE============================================--
-- REGISTRAR CLIENTE
CREATE OR REPLACE FUNCTION REGISTRAR_CLIENTE_COM_ENDERECO(
	-- Cliente
	NOME VARCHAR,
	USUARIO VARCHAR,
	SENHA VARCHAR,
	CPF VARCHAR,
	-- Endereco
	CEP VARCHAR,
	RUA VARCHAR,
	NUMERO INT,
	COMPLEMENTO VARCHAR,
	CIDADE VARCHAR,
	UF VARCHAR
    ) RETURNS VOID AS $$
    DECLARE
        ID_ENDEREC INT;
    BEGIN 
        IF (NOME IS NULL) THEN
            RAISE EXCEPTION 'INFORME O NOME DO CLIENTE';
        ELSIF (USUARIO IS NULL) THEN 
            RAISE EXCEPTION 'INFORME O USUARIO DO CLIENTE';
        ELSIF (SENHA IS NULL) THEN 
            RAISE EXCEPTION 'INFORME A SENHA DO CLIENTE';
        ELSIF (CPF IS NULL) THEN 
            RAISE EXCEPTION 'INFORME O CPF DO CLIENTE';
        ELSIF (CEP IS NULL) THEN 
            RAISE EXCEPTION 'INFORME O CEP DO ENDERECO';
        ELSIF (RUA IS NULL) THEN
            RAISE EXCEPTION 'INFORME A RUA DO ENDERECO';
        ELSIF (NUMERO IS NULL) THEN
            RAISE EXCEPTION 'INFORME O NUMERO DO ENDERECO';
        ELSIF (COMPLEMENTO IS NULL) THEN
            RAISE EXCEPTION 'INFORME O COMPLEMENTO DO ENDERECO';
        ELSIF (CIDADE IS NULL) THEN
            RAISE EXCEPTION 'INFORME A CIDADE DO ENDERECO';
        ELSIF (UF IS NULL) THEN
            RAISE EXCEPTION 'INFORME A UNIDADE FEDERATIVA (UF) DO ENDERECO';
        -- REGRAS DE NEGOCIO 
        ELSIF (LENGTH(CPF) != 11) THEN
            RAISE EXCEPTION 'O CPF DEVE CONTER 11 CARACTERES';
        ELSIF (LENGTH(CEP) != 8) THEN
            RAISE EXCEPTION 'O CEP DEVE CONTER 8 CARACTERES';
        ELSIF (NUMERO < 0) THEN
            RAISE EXCEPTION 'O NUMERO NAO PODE SER NEGATIVO';
        ELSIF (LENGTH(UF) != 2) THEN
            RAISE EXCEPTION 'A UNIDADE FEDERATIVA DEVE CONTER 2 CARACTERES';
        ELSE
            ID_ENDEREC := (REGISTRAR_ENDERECO_NO_BANCO_DE_DADOS(CEP, RUA, NUMERO, COMPLEMENTO, CIDADE, UF));
            PERFORM REGISTRAR_CLIENTE_NO_BANCO_DE_DADOS(NOME, USUARIO, SENHA, CPF, ID_ENDEREC);
            RAISE INFO 'CLIENTE REGISTRADO NO BANCO DE DADOS COM ENDEREÇO';
        END IF;
    END;
$$  LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION REGISTRAR_CLIENTE_NO_BANCO_DE_DADOS(
	NOME VARCHAR,
	USUARIO VARCHAR,
	SENHA VARCHAR,
	CPF VARCHAR,
	ID_ENDERECO INT
    )
    RETURNS VOID AS $$ 
    BEGIN
        INSERT INTO CLIENTE(NOME, USUARIO, SENHA, CPF, ID_ENDERECO)
        VALUES (NOME, USUARIO, SENHA, CPF, ID_ENDERECO);
        RAISE INFO 'CLIENTE REGISTRADO COM SUCESSO!';
    END 
$$ LANGUAGE PLPGSQL;


-- VERIFICAR CLIENTE
CREATE OR REPLACE FUNCTION VERIFICA_EXISTENCIA_DE_CLIENTE(CLIENTE_ID INT) 
    RETURNS BOOLEAN AS $$
    DECLARE
        QTD_RESULTADOS INT;
    BEGIN

        SELECT COUNT(ID_CLIENTE) FROM CLIENTE 
        WHERE ID_CLIENTE = CLIENTE_ID
        INTO QTD_RESULTADOS;

        RETURN QTD_RESULTADOS > 0;

    END;
$$ LANGUAGE PLPGSQL;


-- BUSCAR ID CLIENTE
CREATE OR REPLACE FUNCTION SELECIONAR_ID_CLIENTE_POR_USUARIO(USUARIO_VAR VARCHAR)
    RETURNS INT AS $$
    DECLARE
        ID_CLIENTE_RETORNO INTEGER;
    BEGIN
        ID_CLIENTE_RETORNO = (SELECT ID_CLIENTE FROM CLIENTE WHERE USUARIO = USUARIO_VAR);
        RETURN ID_CLIENTE_RETORNO;
    END
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CADASTRAR_PRODUTO(NOME VARCHAR, DESCRICAO VARCHAR)
    RETURNS VOID AS $$
    BEGIN

        IF (NOME IS NULL) THEN
            RAISE EXCEPTION 'INFORME O NOME DO PRODUTO';
        ELSIF (DESCRICAO IS NULL) THEN
            RAISE EXCEPTION 'INFORME A DESCRIÇÃO DO PRODUTO';
        ELSIF (LENGTH(NOME) < 5) THEN
            RAISE EXCEPTION 'O NOME DO PRODUTO DEVE CONTER PELO MENOS 5 CARACTERES';
        ELSE
            INSERT INTO PRODUTO(NOME, DESCRICAO)
            VALUES (NOME, DESCRICAO);
            RAISE INFO 'PRODUTO CADASTARDO COM SUCESSO';
        END IF;

    END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--
CREATE OR REPLACE FUNCTION VERIFICA_EXISTENCIA_DE_PRODUTO(PRODUTO_ID INT)
    RETURNS BOOLEAN AS $$
    DECLARE
        QTD_RESULTADOS INT;
    BEGIN
        IF (PRODUTO_ID IS NULL) THEN
            RAISE EXCEPTION 'INFORME O ID DO PRODUTO';
        END IF;
        
        SELECT COUNT(ID_PRODUTO) FROM PRODUTO 
        WHERE ID_PRODUTO = PRODUTO_ID 
        INTO QTD_RESULTADOS;

        RETURN QTD_RESULTADOS > 0;
    END;
$$ LANGUAGE PLPGSQL;



--======================================ENDERECO==========================================--
-- REGISTRAR ENDERECO
CREATE OR REPLACE FUNCTION REGISTRAR_ENDERECO_NO_BANCO_DE_DADOS(
	CEP VARCHAR,
	RUA VARCHAR,
	NUMERO INT,
	COMPLEMENTO VARCHAR,
	CIDADE VARCHAR,
	UF VARCHAR
    )
    RETURNS INT AS $$ 
    DECLARE
    ENDEREC_ID INT;
    BEGIN
        INSERT INTO ENDERECO(CEP, RUA, NUMERO, COMPLEMENTO, CIDADE, UF)
        VALUES (CEP, RUA, NUMERO, COMPLEMENTO, CIDADE, UF)
        RETURNING ID_ENDERECO INTO ENDEREC_ID;
        RAISE INFO 'ENDERECO REGISTRADO COM SUCESSO!';
        RETURN ENDEREC_ID;
    END 
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION NOVO_PEDIDO(CLIENTE_ID INT, ENDERECO_ID INT, FORMA_PAGAMENTO INT) 
    RETURNS VOID AS $$
    DECLARE
        EXISTE_PRODUTOS_NO_CARRINHO BOOLEAN;
        TOTAL_DO_PEDIDO FLOAT;
        PEDIDO_ID INT;
    BEGIN

        EXISTE_PRODUTOS_NO_CARRINHO := HA_PRODUTOS_NO_CARRINHO_DO_CLIENTE(CLIENTE_ID);

        IF (EXISTE_PRODUTOS_NO_CARRINHO = FALSE) THEN
            RAISE EXCEPTION 'NÃO HÁ PRODUTOS NO CARRINHO DO CLIENTE INFORMADO';
        ELSE
            IF (VERIFICA_EXISTENCIA_DE_CLIENTE(CLIENTE_ID) = FALSE) THEN
                RAISE EXCEPTION 'CLIENTE INFORMADO NÃO ENCONTRADO';
            ELSIF (ENDERECO_EXISTE(ENDERECO_ID) = FALSE) THEN
                RAISE EXCEPTION 'ENDERECO INFORMADO NÃO ENCONTRADO';
            ELSE
                TOTAL_DO_PEDIDO := VALOR_TOTAL_DO_PEDIDO(CLIENTE_ID);

                INSERT INTO PEDIDO(VALOR, STATUS_VENDA, FORMA_DE_PAGAMENTO, PROTOCOLO_PAGAMENTO, DATA_COMPRA, DATA_PAGAMENTO, DATA_ENVIO, DATA_ENTREGA, ID_ENDERECO, ID_CLIENTE)
                VALUES (TOTAL_DO_PEDIDO, 0, 1, '', CURRENT_DATE, NULL, NULL, NULL, ENDERECO_ID, CLIENTE_ID) 
                RETURNING ID_PEDIDO INTO PEDIDO_ID;

                RAISE INFO 'PEDIDO REGISTRADO COM SUCESSO';
            END IF;
        END IF;

    END;
$$ LANGUAGE PLPGSQL;


-- VERIFICAR ENDERECO
CREATE OR REPLACE FUNCTION ENDERECO_EXISTE(ENDERECO_ID INT) 
    RETURNS BOOLEAN AS $$
    DECLARE
        QTD_RESULTADOS INT;
    BEGIN

        SELECT COUNT(ID_ENDERECO) FROM ENDERECO 
        WHERE ID_ENDERECO = ENDERECO_ID
        INTO QTD_RESULTADOS;

        RETURN QTD_RESULTADOS > 0;

    END;
$$ LANGUAGE PLPGSQL;



--====================================ESTOQUE==============================================--
-- VERIFICAR ESTOQUE
CREATE OR REPLACE FUNCTION VERIFICAR_ESTOQUE_DO_PRODUTO(PRODUTO_LOJA_ID INT, QTD INT)
    RETURNS BOOLEAN AS $$
    DECLARE
        HA_ESTOQUE BOOLEAN DEFAULT FALSE;
    BEGIN
        SELECT QUANTIDADE >= QTD FROM PRODUTO_LOJA AS PJ
        WHERE PJ.ID_PRODUTO_LOJA = PRODUTO_LOJA_ID 
        INTO HA_ESTOQUE;

        RETURN HA_ESTOQUE;
    END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION ADICIONAR_PRODUTO_NA_LOJA(PRODUTO_ID INT, LOJA_ID INT, PRECO FLOAT, QUANTIDADE INT)
    RETURNS VOID AS $$
    DECLARE
        PRODUTO_EXISTE BOOLEAN;
        LOJA_EXISTE BOOLEAN;
    BEGIN

        PRODUTO_EXISTE := VERIFICA_EXISTENCIA_DE_PRODUTO(PRODUTO_ID);
        LOJA_EXISTE := VERIFICA_EXISTENCIA_DE_LOJA(LOJA_ID);

        IF (PRODUTO_EXISTE = FALSE) THEN
            RAISE EXCEPTION 'PRODUTO NÃO ENCONTRADO';
        ELSIF (LOJA_EXISTE = FALSE) THEN
            RAISE EXCEPTION 'LOJA NÃO ENCONTRADA';
        ELSIF (PRECO IS NULL) THEN
            RAISE EXCEPTION 'INFORME O PREÇO DO PRODUTO';
        ELSIF (QUANTIDADE IS NULL) THEN
            RAISE EXCEPTION 'INFORME O QUANTIDADE DO PRODUTO EM ESTOQUE';
        ELSIF (PRECO < 0) THEN
            RAISE EXCEPTION 'O PREÇO DO PRODUTO NÃO PODE SER NEGATIVO';
        ELSIF (QUANTIDADE < 0) THEN
            RAISE EXCEPTION 'A QUANTIDADE EM ESTOQUE NÃO PODE SER NEGATIVO';
        ELSE
            INSERT INTO PRODUTO_LOJA(ID_PRODUTO, ID_LOJA, PRECO_PRODUTO, QUANTIDADE)
            VALUES (PRODUTO_ID, LOJA_ID, PRECO, QUANTIDADE);

            RAISE INFO 'PRODUTO ADICIONADO A LOJA INFORMADA';
        END IF;
        
    END;
$$ LANGUAGE PLPGSQL;




--=========================================ITEM=========================================--
CREATE OR REPLACE FUNCTION ADICIONAR_PRODUTO_AO_CARRINHO(PRODUTO_LOJA_ID INT, CLIENT_ID INT, QTD INT)
    RETURNS VOID AS $$
    DECLARE
        CARRINHO_ID INT;
        HA_ESTOQUE BOOLEAN;
        ITEM_CARRINHO_ID INT;
    BEGIN

        CARRINHO_ID := (RECUPERAR_CARRINHO_DO_USUÁRIO(CLIENT_ID));
        HA_ESTOQUE := (VERIFICAR_ESTOQUE_DO_PRODUTO(PRODUTO_LOJA_ID, QTD));

        IF (HA_ESTOQUE = FALSE) THEN
            RAISE EXCEPTION 'QUANTIDADE INFORMADA NÃO DISPONÍVEL EM ESTOQUE';
        ELSE
            INSERT INTO ITEM_CARRINHO (ID_PRODUTO_LOJA, ID_CARRINHO, QUANTIDADE)
            VALUES (PRODUTO_LOJA_ID, CARRINHO_ID, QTD);
            RAISE INFO 'PRODUTO ADICIONADO AO CARRINHO';
        END IF;
        
    END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION ADICIONAR_AO_CARRINHO(PRODUTO INT, CLIENT VARCHAR, QTD INT)
    RETURNS VOID AS $$
    DECLARE
        CLIENT_ID INT;
    BEGIN
        CLIENT_ID := SELECIONAR_ID_CLIENTE_POR_USUARIO(CLIENT);
        PERFORM ADICIONAR_PRODUTO_AO_CARRINHO(PRODUTO, CLIENT_ID, QTD);
    END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION RECUPERAR_CARRINHO_DO_USUÁRIO(CLIENT_ID INT)
    RETURNS INT AS $$
    DECLARE
        CARRINHO_ENCONTRADO INT;
        CARRINHO_ID INT;
    BEGIN

        SELECT COUNT(ID_CARRINHO) FROM CARRINHO 
        WHERE ID_CLIENTE = CLIENT_ID 
        INTO CARRINHO_ENCONTRADO;

        IF (CARRINHO_ENCONTRADO > 0) THEN
            SELECT ID_CARRINHO FROM CARRINHO 
            WHERE ID_CLIENTE = CLIENT_ID 
            INTO CARRINHO_ID;
        ELSE
            CARRINHO_ID := (CRIAR_NOVO_CARRINHO(CLIENT_ID));
        END IF;

        RETURN CARRINHO_ID;

    END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION RECUPERAR_ID_ITEM_CARRINHO(PRODUTO_LOJA_ID INT, CARRINHO_ID INT) 
    RETURNS INT AS $$
    DECLARE
        ITEM_CARRINHO_ID INT;
    BEGIN

        SELECT ID_ITEM_CARRINHO FROM ITEM_CARRINHO 
        WHERE ID_PRODUTO_LOJA = PRODUTO_LOJA_ID AND ID_CARRINHO = CARRINHO_ID
        INTO ITEM_CARRINHO_ID;

        RETURN ITEM_CARRINHO_ID;

    END;
$$ LANGUAGE PLPGSQL;


--======================================CARRINHO==========================================--
-- REGISTRAR CARRINHO
CREATE OR REPLACE FUNCTION CRIAR_NOVO_CARRINHO(CLIENT_ID INT)
    RETURNS INT AS $$
    DECLARE
        CARRINHO_ID INT;
    BEGIN
        INSERT INTO CARRINHO(ID_CLIENTE)
        VALUES (CLIENT_ID) RETURNING ID_CARRINHO INTO CARRINHO_ID;

        RETURN CARRINHO_ID;
    END;
$$ LANGUAGE PLPGSQL;



-- VERIFICAR COMPRA DUPLICADA trigger
CREATE OR REPLACE FUNCTION PRODUTO_JA_NO_CARRINHO() RETURNS TRIGGER AS $$
    DECLARE
        PRODUTO_ESTA_NO_CARRINHO BOOLEAN;
        QTD_MAIS_QTD_CARRINHO INT;
        HA_ESTOQUE BOOLEAN;
        ITEM_CARRINHO_ID INT;
    BEGIN
        SELECT COUNT(ID_ITEM_CARRINHO) > 0 FROM ITEM_CARRINHO 
        WHERE ID_PRODUTO_LOJA = NEW.ID_PRODUTO_LOJA AND ID_CARRINHO = NEW.ID_CARRINHO 
        INTO PRODUTO_ESTA_NO_CARRINHO;

        IF (PRODUTO_ESTA_NO_CARRINHO = TRUE) THEN
            SELECT QUANTIDADE FROM ITEM_CARRINHO 
            WHERE ID_PRODUTO_LOJA = NEW.ID_PRODUTO_LOJA AND ID_CARRINHO = NEW.ID_CARRINHO 
            INTO QTD_MAIS_QTD_CARRINHO;

            QTD_MAIS_QTD_CARRINHO := QTD_MAIS_QTD_CARRINHO + NEW.QUANTIDADE;
            HA_ESTOQUE := VERIFICAR_ESTOQUE_DO_PRODUTO(NEW.ID_PRODUTO_LOJA, QTD_MAIS_QTD_CARRINHO);

            IF (HA_ESTOQUE = TRUE) THEN
                SELECT ID_ITEM_CARRINHO FROM ITEM_CARRINHO 
                WHERE ID_PRODUTO_LOJA = NEW.ID_PRODUTO_LOJA AND ID_CARRINHO = NEW.ID_CARRINHO 
                INTO ITEM_CARRINHO_ID;

                UPDATE ITEM_CARRINHO
                SET QUANTIDADE = QTD_MAIS_QTD_CARRINHO
                WHERE ID_ITEM_CARRINHO = ITEM_CARRINHO_ID;
                RAISE INFO 'PRODUTO ADICIONADO AO CARRINHO (ADICIONADO A QUANTIDADE JÁ EXISTENTE)';
                RETURN NEW;
            ELSE
                RAISE EXCEPTION 'IMPOSSÍVEL ADICIONAR AO CARRINHO, O PRODUTO JÁ ESTÁ NO CARRINHO'
                                ' E A QUANTIDADE INFORMADA SOMADA À QUANTIDADE DO CARRINHO É MAIOR'
                                ' A QUANTIDADE DISPONÍVEL EM ESTOQUE';
            END IF;
        ELSE
            RETURN NEW;
        END IF;
    END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ADD_ITEM BEFORE INSERT ON ITEM_CARRINHO FOR EACH ROW EXECUTE PROCEDURE PRODUTO_JA_NO_CARRINHO();


-- VERIFICAR CARRINHO
CREATE OR REPLACE FUNCTION HA_PRODUTOS_NO_CARRINHO_DO_CLIENTE(CLIENTE_ID INT) 
    RETURNS BOOLEAN AS $$
    DECLARE
        CARRINHO_ENCONTRADO INT;
        QTD_PRODUTOS_NO_CARRINHO INT;
    BEGIN

        SELECT COUNT(CAR.ID_CARRINHO) FROM CLIENTE CLI
        INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
        WHERE CLI.ID_CLIENTE = CLIENTE_ID
        INTO CARRINHO_ENCONTRADO;

        IF (CARRINHO_ENCONTRADO = 0) THEN
            RAISE EXCEPTION 'NÃO EXISTE CARRINHO PARA O CLIENTE INFORMADO';
        ELSE
            SELECT COUNT(CAR.ID_CARRINHO) FROM CLIENTE CLI
            INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
            INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
            WHERE CLI.ID_CLIENTE = CLIENTE_ID
            INTO QTD_PRODUTOS_NO_CARRINHO;

            IF (QTD_PRODUTOS_NO_CARRINHO = 0) THEN
                RAISE EXCEPTION 'NÃO HÁ PRODUTOS NO CARRINHO DO CLIENTE INFORMADO';
            ELSE
                RETURN TRUE;
            END IF;
        END IF;

        RETURN FALSE;
    END;
$$ LANGUAGE PLPGSQL;


--======================================CARTAO===========================================--
-- REGISTRAR CARTÃO
CREATE OR REPLACE FUNCTION ADICIONAR_CARTAO_AO_PERFIL(
	TITULAR VARCHAR,
	DIGITOS VARCHAR,
	VALIDADE VARCHAR,
	CSV VARCHAR,
	SAVE BOOLEAN,
	USUARIO VARCHAR
    ) RETURNS VOID AS $$
    DECLARE 
        IS_SAVE BOOLEAN;
        ID_CLIENTE INTEGER;
    BEGIN 
        IF (TITULAR IS NULL) THEN
            RAISE EXCEPTION 'INFORME O TITULAR DO CARTAO';
        ELSIF (DIGITOS IS NULL) THEN
            RAISE EXCEPTION 'INFORME OS DIGITOS DO CARTAO';
        ELSIF (VALIDADE IS NULL) THEN
            RAISE EXCEPTION 'INFORME A VALIDADE DO CARTAO';
        ELSIF (CSV IS NULL) THEN
            RAISE EXCEPTION 'INFORME O CSV DO CARTAO';
        ELSIF (USUARIO IS NULL) THEN
            RAISE EXCEPTION 'INFORME O USUÁRIO DONO DO CARTAO';
        -- REGRAS DE NEGOCIO
        ELSIF (LENGTH(DIGITOS) != 4) THEN
            RAISE EXCEPTION 'DIGITO DEVE CONTER 4 CARACTERES';
        ELSIF (LENGTH(VALIDADE) != 5) THEN
            RAISE EXCEPTION 'VALIDADE DEVE CONTER 5 CARACTERES';
        ELSIF (SAVE IS NULL) THEN
            IS_SAVE = FALSE;
        ELSE
            ID_CLIENTE := SELECIONAR_ID_CLIENTE_POR_USUARIO(USUARIO);
            
            IF (ID_CLIENTE IS NULL) THEN
                RAISE EXCEPTION 'USUARIO NAO CADASTRADO, VERIFIQUE O USUARIO INFORMADO E TENTE NOVAMENTE';
            ELSE
                INSERT INTO CARD(TITULAR, DIGITOS, VALIDADE, CSV, SAVE, ID_CLIENTE)
                VALUES (TITULAR, DIGITOS, VALIDADE, CSV, IS_SAVE, ID_CLIENTE);
                RAISE INFO 'CARTAO ADICIONADO COM SUCESSO AO CLIENTE';
            END IF;
        END IF;
    END 
$$ LANGUAGE PLPGSQL;


-- VERIFICAR CARTÃO



--===========================================PEDIDO=======================================--

CREATE OR REPLACE FUNCTION PEDIDO_ENTREGUE(
    ID_PDD INT
    ) RETURNS VOID AS $$
    DECLARE
        CURRENT_DATE TIMESTAMP;
        STTS_VENDA INT;
    BEGIN
        STTS_VENDA = 3;
        CURRENT_DATE := NOW;
        UPDATE PEDIDO
        SET DATA_ENTREGA = CURRENT_DATE,
            STATUS_VENDA = STTS_VENDA
        WHERE ID_PEDIDO = ID_PDD;
    END 
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CONFIMAR_PAGAMENTO_PEDIDO(
	ID_PDD INT,
    PRTCL_PAGAMENTO VARCHAR, 
	DT_PAGAMENTO DATE, 
	FRM_PAGAMENTO INT
    ) RETURNS VOID AS $$ 
    DECLARE
        CURRENT_DATE TIMESTAMP;
        STTS_VENDA INT;
    BEGIN
        STTS_VENDA = 2;
        CURRENT_DATE := 'NOW';
        UPDATE PEDIDO 
        SET PROTOCOLO_PAGAMENTO = PRTCL_PAGAMENTO, 
            DATA_PAGAMENTO = DT_PAGAMENTO, 
            FORMA_DE_PAGAMENTO = FRM_PAGAMENTO,
            DATA_ENVIO = CURRENT_DATE,
            STATUS_VENDA = STTS_VENDA
        WHERE ID_PEDIDO = ID_PDD;
    END 
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION DECREMENTAR_ESTOQUE_DOS_PRODUTOS_DO_PEDIDO(CLIENTE_ID INT) 
    RETURNS VOID AS $$
    DECLARE
        CARRINHO_ID INT;
        AROW RECORD;
        AROW_QTD INT;
        AROW_PRODUTO_LOJA_ID INT;
    BEGIN
        CARRINHO_ID := RECUPERAR_CARRINHO_DO_USUÁRIO(CLIENTE_ID);
        FOR AROW IN SELECT PROD_LOJA.ID_PRODUTO_LOJA, ITEM_CAR.QUANTIDADE FROM CARRINHO CAR 
                    INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
                    INNER JOIN PRODUTO_LOJA PROD_LOJA ON ITEM_CAR.ID_PRODUTO_LOJA = PROD_LOJA.ID_PRODUTO_LOJA
                    WHERE CAR.ID_CARRINHO = 1
        LOOP
            AROW_PRODUTO_LOJA_ID := AROW.ID_PRODUTO_LOJA;
            AROW_QTD := AROW.QUANTIDADE;

            IF (
                (SELECT QUANTIDADE >= AROW_QTD FROM PRODUTO_LOJA 
                WHERE ID_PRODUTO_LOJA = AROW_PRODUTO_LOJA_ID) = FALSE
            ) THEN
                RAISE EXCEPTION 'A QUANTIDADE INFORMADA NO PEDIDO É SUPERIOR A QUANTIDADE EM ESTOQUE';
            ELSE
                UPDATE PRODUTO_LOJA
                SET QUANTIDADE = QUANTIDADE - AROW_QTD
                WHERE ID_PRODUTO_LOJA = AROW_PRODUTO_LOJA_ID;
            END IF;
        END LOOP;
        RAISE INFO 'QUANTIDADE EM ESTOQUE DOS PRODUTOS PEDIDOS FORAM ATUALIZADOS';
    END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION COPIAR_PRODUTOS_DO_CARRINHO_PARA_PEDIDO(CLIENTE_ID INT, PEDIDO_ID INT)
    RETURNS VOID AS $$
    DECLARE
        AROW RECORD;
        PRODUTO_LOJA_ID INT;
        QTD_PRODUTOS INT;
        PRECO FLOAT;
    BEGIN

        FOR AROW IN 
                    SELECT ITEM_CAR.*, PROD_LOJA.PRECO_PRODUTO FROM CLIENTE CLI
                    INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
                    INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
                    INNER JOIN PRODUTO_LOJA PROD_LOJA ON PROD_LOJA.ID_PRODUTO_LOJA = ITEM_CAR.ID_PRODUTO_LOJA
                    WHERE CLI.ID_CLIENTE = CLIENTE_ID
        LOOP
            PRODUTO_LOJA_ID := AROW.ID_PRODUTO_LOJA;
            QTD_PRODUTOS := AROW.QUANTIDADE;
            PRECO := AROW.PRECO_PRODUTO;

            PERFORM REGISTRAR_ITEM_PEDIDO(PRODUTO_LOJA_ID, PEDIDO_ID, PRECO, QTD_PRODUTOS);
        END LOOP;

        RAISE INFO 'TODOS OS PRODUTOS COPIADOS DO CARRINHO PARA O ITENS DO PEDIDO';

    END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION RESETAR_PRODUTOS_DO_CARRINHO_DO_CLIENTE() RETURNS TRIGGER AS $$
    DECLARE
        CARRINHO_ID INT;
    BEGIN
        PERFORM COPIAR_PRODUTOS_DO_CARRINHO_PARA_PEDIDO(NEW.ID_CLIENTE, NEW.ID_PEDIDO);
        PERFORM DECREMENTAR_ESTOQUE_DOS_PRODUTOS_DO_PEDIDO(NEW.ID_CLIENTE);

        CARRINHO_ID := RECUPERAR_CARRINHO_DO_USUÁRIO(NEW.ID_CLIENTE); -- FUNÇÃO CRIADA NO ARQUIVO "adicionar-produto-ao-carrinho-de-compras"
        DELETE FROM ITEM_CARRINHO 
        WHERE ID_CARRINHO = CARRINHO_ID;
        RAISE INFO 'PRODUTOS REMOVIDOS DO CARRINHO DO CLIENTE';
        RETURN OLD;
    END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CLEAR_CARRINHO AFTER INSERT ON PEDIDO FOR EACH ROW EXECUTE PROCEDURE RESETAR_PRODUTOS_DO_CARRINHO_DO_CLIENTE();


CREATE OR REPLACE FUNCTION REGISTRAR_ITEM_PEDIDO(PRODUTO_LOJA_ID INT, PEDIDO_ID INT, VALOR FLOAT, QTD INT)
    RETURNS VOID AS $$
    BEGIN

        INSERT INTO ITEM_PEDIDO(ID_PRODUTO_LOJA, ID_PEDIDO, VALOR_PRODUTO, QUANTIDADE)
        VALUES (PRODUTO_LOJA_ID, PEDIDO_ID, VALOR, QTD);
        RAISE INFO 'PRODUTO ADICIONADO AOS ITENS DO PEDIDO';

    END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION VALOR_TOTAL_DO_PEDIDO(CLIENTE_ID INT) 
    RETURNS FLOAT AS $$
    DECLARE
        VALOR_TOTAL FLOAT;
    BEGIN

        SELECT SUM(PROD_LOJ.QUANTIDADE * PROD_LOJ.PRECO_PRODUTO) FROM CLIENTE CLI
        INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
        INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
        INNER JOIN PRODUTO_LOJA PROD_LOJ ON PROD_LOJ.ID_PRODUTO_LOJA = ITEM_CAR.ID_PRODUTO_LOJA
        WHERE CLI.ID_CLIENTE = CLIENTE_ID
        INTO VALOR_TOTAL;

        RETURN VALOR_TOTAL;

    END;
$$ LANGUAGE PLPGSQL;



SELECT REGISTRAR_LOJA('C&A', 'DJANGO01', 'C e A', 'LOJA DE ROUPAS');
SELECT CADASTRAR_PRODUTO('OMEGA3', 'TOPTHERM');
SELECT CADASTRAR_PRODUTO('BRUSINHA', 'CROPPED');
SELECT ADICIONAR_PRODUTO_NA_LOJA(1, 1, 11.11, 57);
SELECT REGISTRAR_CLIENTE_COM_ENDERECO('AYANA MARIA SILCA', 'AYA', 'dJANGO01', '12200122203', 'MAYEVIRA', 'VALADARES', 4550, 'APT 3', 'TERESINA', 'PI');
SELECT ADICIONAR_CARTAO_AO_PERFIL('AYANA MARIA SILCA', '0013', '12/05', '151', TRUE, 'AYA');
SELECT REGISTRAR_ENDERECO_NO_BANCO_DE_DADOS('64039140', 'RUA VARCHAR', '1212', 'AO TOPO DO MORRO', 'DHELY', 'TO');
SELECT CRIAR_NOVO_CARRINHO(1);
SELECT ADICIONAR_PRODUTO_AO_CARRINHO(1, 1, 5);
SELECT NOVO_PEDIDO(1,1,2);
