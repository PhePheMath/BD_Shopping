/* REQUISITOS */

-- 1 - Deve-se verificar se o carrinho do cliente está vazio, se estiver o registro do pedido não pode ser realizado.
-- 2 - Deve-se realizar o somatório do valor total dos produtos do carrinho multiplicando pela quantidade, e armazenar esse dados no atributo valor na entidade pedido.
-- 3 - Deve-se armazenar na data da compra a data atual (current_date)
-- 4 - Deve-se copiar todos os produtos do item_carrinho para item_pedido, e também armazenar o valor do produto no momento do pedido no valor do item_pedido.
-- 5 - Deve-se decrementar a quantidade em estoque dos produtos informados
-- 6 - Deve-se resetar os produtos do carrinho do cliente

/* FUNÇÕES NECESSÁRIAS PARA A RESOLUÇÃO */

-- NOVO_PEDIDO(CLIENTE_ID INT, ENDERECO_ID INT, FORMA_PAGAMENTO INT)        -> VOID - FUNÇÃO PRINCIPAL
-- DECREMENTAR_ESTOQUE_DOS_PRODUTOS_DO_PEDIDO(CLIENTE_ID INT)               -> VOID
-- COPIAR_PRODUTOS_DO_CARRINHO_PARA_PEDIDO(CLIENTE_ID INT, PEDIDO_ID INT)   -> VOID
-- RESETAR_PRODUTOS_DO_CARRINHO_DO_CLIENTE(CLIENTE_ID INT)                  -> VOID
-- HA_PRODUTOS_NO_CARRINHO_DO_CLIENTE(CLIENTE_ID INT)                       -> BOOLEAN
-- VALOR_TOTAL_DO_PEDIDO(CLIENTE_ID INT)                                    -> FLOAT
-- CLIENTE_EXISTE(CLIENTE_ID INT)                                           -> BOOLEAN
-- ENDERECO_EXISTE(ENDERECO_ID INT)                                         -> BOOLEAN

--===========================================================================================--
CREATE OR REPLACE FUNCTION NOVO_PEDIDO(CLIENTE_ID INT, ENDERECO_ID INT, FORMA_PAGAMENTO INT) 
RETURNS VOID AS $$
DECLARE
    EXISTE_PRODUTOS_NO_CARRINHO BOOLEAN;
    TOTAL_DO_PEDIDO FLOAT;
    PEDIDO_ID INT;
BEGIN

    EXISTE_PRODUTOS_NO_CARRINHO := HA_PRODUTOS_NO_CARRINHO_DO_CLIENTE(CLIENTE_ID);

    IF (EXISTE_PRODUTOS_NO_CARRINHO = FALSE) THEN
        RAISE EXCEPTION 'NÃO HÁ PRODUTOS NO CARRINHO DO CLIENTE INFORMADO';
    ELSE
        IF (CLIENTE_EXISTE(CLIENTE_ID) = FALSE) THEN
            RAISE EXCEPTION 'CLIENTE INFORMADO NÃO ENCONTRADO';
        ELSIF (ENDERECO_EXISTE(ENDERECO_ID) = FALSE) THEN
            RAISE EXCEPTION 'ENDERECO INFORMADO NÃO ENCONTRADO';
        ELSE
            TOTAL_DO_PEDIDO := VALOR_TOTAL_DO_PEDIDO(CLIENTE_ID);
            PERFORM DECREMENTAR_ESTOQUE_DOS_PRODUTOS_DO_PEDIDO(CLIENTE_ID);

            INSERT INTO PEDIDO(VALOR, STATUS_VENDA, FORMA_DE_PAGAMENTO, PROTOCOLO_PAGAMENTO, DATA_COMPRA, DATA_PAGAMENTO, DATA_ENVIO, DATA_ENTREGA, ID_ENDERECO, ID_CLIENTE)
            VALUES (TOTAL_DO_PEDIDO, 0, 1, '', CURRENT_DATE, NULL, NULL, NULL, ENDERECO_ID, CLIENTE_ID) 
            RETURNING ID_PEDIDO INTO PEDIDO_ID;

            PERFORM COPIAR_PRODUTOS_DO_CARRINHO_PARA_PEDIDO(CLIENTE_ID, PEDIDO_ID);
            PERFORM RESETAR_PRODUTOS_DO_CARRINHO_DO_CLIENTE(CLIENTE_ID);
            RAISE INFO 'PEDIDO REGISTRADO COM SUCESSO';
        END IF;
    END IF;

END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--
CREATE OR REPLACE FUNCTION DECREMENTAR_ESTOQUE_DOS_PRODUTOS_DO_PEDIDO(CLIENTE_ID INT) 
RETURNS VOID AS $$
DECLARE
    CARRINHO_ID INT;
    AROW RECORD;
    AROW_QTD INT;
    AROW_PRODUTO_LOJA_ID INT;
BEGIN
    CARRINHO_ID := RECUPERAR_CARRINHO_DO_USUÁRIO(CLIENTE_ID);
    FOR AROW IN SELECT PROD_LOJA.ID_PRODUTO_LOJA, ITEM_CAR.QUANTIDADE FROM CARRINHO CAR 
                INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
                INNER JOIN PRODUTO_LOJA PROD_LOJA ON ITEM_CAR.ID_PRODUTO_LOJA = PROD_LOJA.ID_PRODUTO_LOJA
                WHERE CAR.ID_CARRINHO = 1
    LOOP
        AROW_PRODUTO_LOJA_ID := AROW.ID_PRODUTO_LOJA;
        AROW_QTD := AROW.QUANTIDADE;

        IF (
            (SELECT QUANTIDADE >= AROW_QTD FROM PRODUTO_LOJA 
            WHERE ID_PRODUTO_LOJA = AROW_PRODUTO_LOJA_ID) = FALSE
        ) THEN
            RAISE EXCEPTION 'A QUANTIDADE INFORMADA NO PEDIDO É SUPERIOR A QUANTIDADE EM ESTOQUE';
        ELSE
            UPDATE PRODUTO_LOJA
            SET QUANTIDADE = QUANTIDADE - AROW_QTD
            WHERE ID_PRODUTO_LOJA = AROW_PRODUTO_LOJA_ID;
        END IF;
    END LOOP;
    RAISE INFO 'QUANTIDADE EM ESTOQUE DOS PRODUTOS PEDIDOS FORAM ATUALIZADOS';
END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--
CREATE OR REPLACE FUNCTION COPIAR_PRODUTOS_DO_CARRINHO_PARA_PEDIDO(CLIENTE_ID INT, PEDIDO_ID INT)
RETURNS VOID AS $$
DECLARE
	AROW RECORD;
	PRODUTO_LOJA_ID INT;
	QTD_PRODUTOS INT;
	PRECO FLOAT;
BEGIN

    FOR AROW IN 
                SELECT ITEM_CAR.*, PROD_LOJA.PRECO_PRODUTO FROM CLIENTE CLI
                INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
                INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
                INNER JOIN PRODUTO_LOJA PROD_LOJA ON PROD_LOJA.ID_PRODUTO_LOJA = ITEM_CAR.ID_PRODUTO_LOJA
                WHERE CLI.ID_CLIENTE = CLIENTE_ID
    LOOP
		PRODUTO_LOJA_ID := AROW.ID_PRODUTO_LOJA;
		QTD_PRODUTOS := AROW.QUANTIDADE;
		PRECO := AROW.PRECO_PRODUTO;

        PERFORM REGISTRAR_ITEM_PEDIDO(PRODUTO_LOJA_ID, PEDIDO_ID, PRECO, QTD_PRODUTOS);
    END LOOP;

    RAISE INFO 'TODOS OS PRODUTOS COPIADOS DO CARRINHO PARA O ITENS DO PEDIDO';

END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--
CREATE OR REPLACE FUNCTION RESETAR_PRODUTOS_DO_CARRINHO_DO_CLIENTE(CLIENTE_ID INT)
RETURNS VOID AS $$
DECLARE
    CARRINHO_ID INT;
BEGIN
    CARRINHO_ID := RECUPERAR_CARRINHO_DO_USUÁRIO(CLIENTE_ID); -- FUNÇÃO CRIADA NO ARQUIVO "adicionar-produto-ao-carrinho-de-compras"
    DELETE FROM ITEM_CARRINHO 
    WHERE ID_CARRINHO = CARRINHO_ID;
    RAISE INFO 'PRODUTOS REMOVIDOS DO CARRINHO DO CLIENTE';
END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--
CREATE OR REPLACE FUNCTION REGISTRAR_ITEM_PEDIDO(PRODUTO_LOJA_ID INT, PEDIDO_ID INT, VALOR FLOAT, QTD INT)
RETURNS VOID AS $$
BEGIN

    INSERT INTO ITEM_PEDIDO(ID_PRODUTO_LOJA, ID_PEDIDO, VALOR_PRODUTO, QUANTIDADE)
    VALUES (PRODUTO_LOJA_ID, PEDIDO_ID, VALOR, QTD);
    RAISE INFO 'PRODUTO ADICIONADO AOS ITENS DO PEDIDO';

END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--
CREATE OR REPLACE FUNCTION HA_PRODUTOS_NO_CARRINHO_DO_CLIENTE(CLIENTE_ID INT) 
RETURNS BOOLEAN AS $$
DECLARE
    CARRINHO_ENCONTRADO INT;
    QTD_PRODUTOS_NO_CARRINHO INT;
BEGIN

    SELECT COUNT(CAR.ID_CARRINHO) FROM CLIENTE CLI
    INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
    WHERE CLI.ID_CLIENTE = CLIENTE_ID
    INTO CARRINHO_ENCONTRADO;

    IF (CARRINHO_ENCONTRADO = 0) THEN
        RAISE EXCEPTION 'NÃO EXISTE CARRINHO PARA O CLIENTE INFORMADO';
    ELSE
        SELECT COUNT(CAR.ID_CARRINHO) FROM CLIENTE CLI
        INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
        INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
        WHERE CLI.ID_CLIENTE = CLIENTE_ID
        INTO QTD_PRODUTOS_NO_CARRINHO;

        IF (QTD_PRODUTOS_NO_CARRINHO = 0) THEN
            RAISE EXCEPTION 'NÃO HÁ PRODUTOS NO CARRINHO DO CLIENTE INFORMADO';
        ELSE
            RETURN TRUE;
        END IF;
    END IF;

    RETURN FALSE;
END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--

CREATE OR REPLACE FUNCTION VALOR_TOTAL_DO_PEDIDO(CLIENTE_ID INT) 
RETURNS FLOAT AS $$
DECLARE
    VALOR_TOTAL FLOAT;
BEGIN

    SELECT SUM(PROD_LOJ.QUANTIDADE * PROD_LOJ.PRECO_PRODUTO) FROM CLIENTE CLI
    INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
    INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
    INNER JOIN PRODUTO_LOJA PROD_LOJ ON PROD_LOJ.ID_PRODUTO_LOJA = ITEM_CAR.ID_PRODUTO_LOJA
    WHERE CLI.ID_CLIENTE = CLIENTE_ID
    INTO VALOR_TOTAL;

    RETURN VALOR_TOTAL;

END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--

CREATE OR REPLACE FUNCTION CLIENTE_EXISTE(CLIENTE_ID INT) 
RETURNS BOOLEAN AS $$
DECLARE
    QTD_RESULTADOS INT;
BEGIN

    SELECT COUNT(ID_CLIENTE) FROM CLIENTE 
    WHERE ID_CLIENTE = CLIENTE_ID
    INTO QTD_RESULTADOS;

    RETURN QTD_RESULTADOS > 0;

END;
$$ LANGUAGE PLPGSQL;

--===========================================================================================--

CREATE OR REPLACE FUNCTION ENDERECO_EXISTE(ENDERECO_ID INT) 
RETURNS BOOLEAN AS $$
DECLARE
    QTD_RESULTADOS INT;
BEGIN

    SELECT COUNT(ID_ENDERECO) FROM ENDERECO 
    WHERE ID_ENDERECO = ENDERECO_ID
    INTO QTD_RESULTADOS;

    RETURN QTD_RESULTADOS > 0;

END;
$$ LANGUAGE PLPGSQL;