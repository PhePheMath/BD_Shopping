

--===========================================PEDIDO=======================================--

CREATE OR REPLACE FUNCTION PEDIDO_ENTREGUE(
    ID_PDD INT
) RETURNS VOID AS $$
DECLARE
    CURRENT_DATE TIMESTAMP;
    STTS_VENDA INT;
BEGIN
    STTS_VENDA = 3;
    CURRENT_DATE := NOW;
    UPDATE PEDIDO
    SET DATA_ENTREGA = CURRENT_DATE,
        STATUS_VENDA = STTS_VENDA
    WHERE ID_PEDIDO = ID_PDD;
END $$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CONFIMAR_PAGAMENTO_PEDIDO(
	ID_PDD INT,
    PRTCL_PAGAMENTO VARCHAR, 
	DT_PAGAMENTO DATE, 
	FRM_PAGAMENTO INT
) RETURNS VOID AS $$ 
DECLARE
    CURRENT_DATE TIMESTAMP;
    STTS_VENDA INT;
BEGIN
    STTS_VENDA = 2;
    CURRENT_DATE := 'NOW';
    UPDATE PEDIDO 
    SET PROTOCOLO_PAGAMENTO = PRTCL_PAGAMENTO, 
        DATA_PAGAMENTO = DT_PAGAMENTO, 
        FORMA_DE_PAGAMENTO = FRM_PAGAMENTO,
        DATA_ENVIO = CURRENT_DATE,
        STATUS_VENDA = STTS_VENDA
    WHERE ID_PEDIDO = ID_PDD;
END $$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION DECREMENTAR_ESTOQUE_DOS_PRODUTOS_DO_PEDIDO(CLIENTE_ID INT) 
RETURNS VOID AS $$
DECLARE
    CARRINHO_ID INT;
    AROW RECORD;
    AROW_QTD INT;
    AROW_PRODUTO_LOJA_ID INT;
BEGIN
    CARRINHO_ID := RECUPERAR_CARRINHO_DO_USUÁRIO(CLIENTE_ID);
    FOR AROW IN SELECT PROD_LOJA.ID_PRODUTO_LOJA, ITEM_CAR.QUANTIDADE FROM CARRINHO CAR 
                INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
                INNER JOIN PRODUTO_LOJA PROD_LOJA ON ITEM_CAR.ID_PRODUTO_LOJA = PROD_LOJA.ID_PRODUTO_LOJA
                WHERE CAR.ID_CARRINHO = 1
    LOOP
        AROW_PRODUTO_LOJA_ID := AROW.ID_PRODUTO_LOJA;
        AROW_QTD := AROW.QUANTIDADE;

        IF (
            (SELECT QUANTIDADE >= AROW_QTD FROM PRODUTO_LOJA 
            WHERE ID_PRODUTO_LOJA = AROW_PRODUTO_LOJA_ID) = FALSE
        ) THEN
            RAISE EXCEPTION 'A QUANTIDADE INFORMADA NO PEDIDO É SUPERIOR A QUANTIDADE EM ESTOQUE';
        ELSE
            UPDATE PRODUTO_LOJA
            SET QUANTIDADE = QUANTIDADE - AROW_QTD
            WHERE ID_PRODUTO_LOJA = AROW_PRODUTO_LOJA_ID;
        END IF;
    END LOOP;
    RAISE INFO 'QUANTIDADE EM ESTOQUE DOS PRODUTOS PEDIDOS FORAM ATUALIZADOS';
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION COPIAR_PRODUTOS_DO_CARRINHO_PARA_PEDIDO(CLIENTE_ID INT, PEDIDO_ID INT)
RETURNS VOID AS $$
DECLARE
	AROW RECORD;
	PRODUTO_LOJA_ID INT;
	QTD_PRODUTOS INT;
	PRECO FLOAT;
BEGIN

    FOR AROW IN 
                SELECT ITEM_CAR.*, PROD_LOJA.PRECO_PRODUTO FROM CLIENTE CLI
                INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
                INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
                INNER JOIN PRODUTO_LOJA PROD_LOJA ON PROD_LOJA.ID_PRODUTO_LOJA = ITEM_CAR.ID_PRODUTO_LOJA
                WHERE CLI.ID_CLIENTE = CLIENTE_ID
    LOOP
		PRODUTO_LOJA_ID := AROW.ID_PRODUTO_LOJA;
		QTD_PRODUTOS := AROW.QUANTIDADE;
		PRECO := AROW.PRECO_PRODUTO;

        PERFORM REGISTRAR_ITEM_PEDIDO(PRODUTO_LOJA_ID, PEDIDO_ID, PRECO, QTD_PRODUTOS);
    END LOOP;

    RAISE INFO 'TODOS OS PRODUTOS COPIADOS DO CARRINHO PARA O ITENS DO PEDIDO';

END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION RESETAR_PRODUTOS_DO_CARRINHO_DO_CLIENTE(CLIENTE_ID INT)
RETURNS VOID AS $$
DECLARE
    CARRINHO_ID INT;
BEGIN
    CARRINHO_ID := RECUPERAR_CARRINHO_DO_USUÁRIO(CLIENTE_ID); -- FUNÇÃO CRIADA NO ARQUIVO "adicionar-produto-ao-carrinho-de-compras"
    DELETE FROM ITEM_CARRINHO 
    WHERE ID_CARRINHO = CARRINHO_ID;
    RAISE INFO 'PRODUTOS REMOVIDOS DO CARRINHO DO CLIENTE';
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION REGISTRAR_ITEM_PEDIDO(PRODUTO_LOJA_ID INT, PEDIDO_ID INT, VALOR FLOAT, QTD INT)
RETURNS VOID AS $$
BEGIN

    INSERT INTO ITEM_PEDIDO(ID_PRODUTO_LOJA, ID_PEDIDO, VALOR_PRODUTO, QUANTIDADE)
    VALUES (PRODUTO_LOJA_ID, PEDIDO_ID, VALOR, QTD);
    RAISE INFO 'PRODUTO ADICIONADO AOS ITENS DO PEDIDO';

END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION VALOR_TOTAL_DO_PEDIDO(CLIENTE_ID INT) 
RETURNS FLOAT AS $$
DECLARE
    VALOR_TOTAL FLOAT;
BEGIN

    SELECT SUM(PROD_LOJ.QUANTIDADE * PROD_LOJ.PRECO_PRODUTO) FROM CLIENTE CLI
    INNER JOIN CARRINHO CAR ON CLI.ID_CLIENTE = CAR.ID_CLIENTE
    INNER JOIN ITEM_CARRINHO ITEM_CAR ON CAR.ID_CARRINHO = ITEM_CAR.ID_CARRINHO
    INNER JOIN PRODUTO_LOJA PROD_LOJ ON PROD_LOJ.ID_PRODUTO_LOJA = ITEM_CAR.ID_PRODUTO_LOJA
    WHERE CLI.ID_CLIENTE = CLIENTE_ID
    INTO VALOR_TOTAL;

    RETURN VALOR_TOTAL;

END;
$$ LANGUAGE PLPGSQL;

